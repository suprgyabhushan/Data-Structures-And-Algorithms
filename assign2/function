/*This appends 'l' of zeroes to the beggining of the string*/
void pad(int *array1, int l){
while(l--){
array1[l] = 0;
}
//return a;
}





/*Ths function subtracts two given strings of numbers*/
int sub(int *array1, int *array2){
/*
* If a is negative, the result is -(b+a)
* If b is negative, the result is (a+b)
* If a and b are both negative the result is (b-a)
*/
/*if(a[0] == '-' and b[0] == '-')
return sub(b.substr(1), a.substr(1));
else if(a[0] == '-')
return '-' + add(a.substr(1), b);
else if(b[0] == '-')
return add(a, b.substr(1));*/
/*We pad the two numbers and check which one is bigger so that we can assert wether the result is negative or not*/
int a_length = 1001, b_length = 1, borrow_from, i, j;
bool is_negative = false; // Is the result of the subtraction negative? It is false by default
int c[1001] = {0}, temp[1001] ={0}; //The temp string has been made to accomodate string swaps
if(a_length > b_length){
pad(array2, a_length - b_length);
j = b_length - 1;
i = a_length - 1;
}
/*else if(a_length < b_length){
pad(a , b_length - a_length);
j = a_length - 1;
i = b_length - 1;
}
else{
j = a_length - 1;
i = j;
}*/
/*
This method to compare strings works accurately only if they are of equal length.
Hence we are padding them with zeroes if they are of unequal length
*/
/*if(b>a){
is_negative = true; //This means the result will be negative
temp = a;
a = b;
b = temp;
}*/
//unpad_zeroes(a);
//unpad_zeroes(b);
//if(b == "0"){
//return a;
//}
for(j; j >= 0; j--){
if(array2[j] <= array1[i]){
//This is the case where we dont have to borrow from the next digits
c[j] = a[i] - b[j] ;
}
else{
//In this case we have to borrow
borrow_from = i - 1;
while(array1[borrow_from] == 0)
{
//This loop gives us the first index from where we can borrow a digit
borrow_from--;
}
array1[borrow_from++]--;
while(borrow_from < i) array1[borrow_from++] = 9;
c[j] = array1[i] - array2[j]; // After succesfully borrowing, we can now subtract the numbers
}
i--;
}
if(i >= 0){
//In case the string a has more digits than b, then the remaining digits are appended in this loop
while(i>=0){
c[i] = a[i];
i--;
}
}
//unpad_zeroes(c);
//if(is_negative)
//return '-' + c;
return c;
}

